_____________________________________Projeto Chronos (Pomodoro)_____________________________________             

7. Criando o projeto Chronos:

    7.1- Comando: 
        
        npm create vite@latest

    7.2- Selecionar 'React' e depois 'Typescript + SWC'.

    7.3- Configurando o VSCode:

        1Âº- Criar pasta '.vscode'.

        2Âº- Criar arquivo 'settings.json' dentro da pasta '.vscode'.

        3Âº- ConfiguraÃ§Ãµes do arquivo 'settings.json':

            {
            "window.zoomLevel": 1,
            "breadcrumbs.enabled": false,
            "editor.fontSize": 24,
            "debug.console.fontSize": 24,
            "terminal.integrated.fontSize": 24,
            "editor.glyphMargin": false,
            "workbench.activityBar.location": "hidden",
            "editor.lineNumbers": "off",
            "files.eol": "\n", // Final de linha sempre serÃ¡ LF

            // ðŸ›  FormataÃ§Ã£o e Lint
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true,

            "editor.codeActionsOnSave": {
                "source.fixAll.eslint": "explicit"
            },

            "[javascript]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[typescript]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[xml]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[svg]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[html]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            }
            }

        4Âº- Criar arquivo '.prettierrc.json'.

        5Âº- ConfiguraÃ§Ãµes do arquivo '.prettierrc.json':

            {
            "arrowParens": "avoid",
            "bracketSpacing": true,
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "jsxBracketSameLine": false,
            "jsxSingleQuote": true,
            "printWidth": 80,
            "proseWrap": "always",
            "quoteProps": "as-needed",
            "requirePragma": false,
            "semi": true,
            "singleQuote": true,
            "tabWidth": 2,
            "trailingComma": "all",
            "useTabs": false
            }

        6Âº- Comando 'npm run dev' para executar o projeto.

____________________________________________________________________________________________________

8. Configurando SSH Keys, Git e Github

    8.1- Criando chave ssh:

        ssh-keygen.exe

    8.2- Github -> Settings -> SSH and GPG keys -> New SSH Key -> Colar chave criada.

    8.3- CriaÃ§Ã£o do repositÃ³rio no Github

    8.4- Pegar link SSH do repositÃ³rio.

    8.5- Configurando o git:

        1Âº- git init

        2Âº- git branch -m main

        3Âº- git config user.name "Fernando Dalpiaz"

        4Âº- git config user.email "fernandoldalpiaz@gmail.com"

        5Âº- git config core.eol lf

        6Âº- git config core.autocrlf input

        7Âº- Visualizar configuraÃ§Ãµes locais: git config --list --local

    8.6- Criando o primeiro commit:

        1Âº- git add .

        2Âº- git commit -m "Commit Inicial"

        3Âº- git remote add origin git@github.com:FernandoDalpiaz/chronos-pomodoro.git

        4Âº- git push -u origin main

____________________________________________________________________________________________________

12. Component: criando meu primeiro componente do React com JSX (TSX)

    12.1- APAGAR o conteÃºdo gerado ao iniciar o Vite:

        - Pasta 'main.tsx':

            import './index.css'
            import App from './App.tsx'

        - Deletar 'App.css', 'App.tsx' e 'Index.css'.

    12.2- Criar a pasta 'App.tsx'.

    12.3- Criando o componente na pasta 'App.tsx':

        export function App() {
        return (
            <>                                                                                  // React Fragment
            <h1>OlÃ¡ Mundo (do App)</h1>
            <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
            </>
        );
        }

    12.4- Importando o componente na pasta 'main.tsx':

        import { App } from './App';

        createRoot(document.getElementById('root')!).render(
        <StrictMode>
            <App />
        </StrictMode>,
        );

____________________________________________________________________________________________________

13. Importando e usando arquivos de CSS globais

    13.1- Criar pasta 'styles' na pasta 'src'.

    13.2- Criar os arquivos 'global.css' e 'theme.css' na pasta 'styles':

        - theme.css: Utilizada para criar variÃ¡veis. Ex:

            :root {
                --primary: pink;        // Definindo a cor primÃ¡ria como rosa.
            }

        - global.css: Pode utilizar as variÃ¡veis do 'theme.css'. Ex:

            h1 {
            color: var(--primary);
            }



    13.2- Importar 'global.css' e 'theme.css' no 'App.tsx':

____________________________________________________________________________________________________

14. Importando e usando arquivos de CSS Modules com escopo de componente

    14.1- Criar pasta 'components' dentro da pasta 'src'.

    14.2- Criar componente 'Heading.tsx' na pasta 'components':

        import styles from './Heading.module.css';

        export function Heading() {
        return <h1 className={styles.heading}>OlÃ¡ Mundo</h1>;               // Importando o .heading do Heading.module.css
        }

    14.3- Criar componente 'Heading.module.css' na pasta 'components':

        .heading {
            background-color: brown;
        }

    14.4- ExtensÃ£o CSS Modules: Ajuda a auto-preencher as classes na pasta 'Heading.tsx.

____________________________________________________________________________________________________

16. Propriedades (props) e children de componentes no React

    16.1- Adicionar input 'props' no elemento 'Heading.tsx':

        export function Heading(props) {
            return <h1 className={styles.heading}>{props.children}</h1>;
        }

    16.2- Agora, ao chamar o elemento no 'App.tsx', pode-se colocar o conteÃºdo filho e atÃ© atributos:


        export function App() {
        return (
            <>
            <Heading atributo1={123} atributo2='String Qualquer'>OlÃ¡ Mundo Novo</Heading>
            <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
            </>
        );
        }

____________________________________________________________________________________________________

17. VariÃ¡veis e Reset de CSS do Chronos

    17.1- Ajustando o 'theme.css':

        :root {
        --gray-100: #e6e9f0;
        --gray-200: #cdd3e1;
        --gray-300: #aab3cc;
        --gray-400: #555f7d;
        --gray-500: #454f6a;
        --gray-600: #363d56;
        --gray-700: #272f43;
        --gray-800: #181f2e;
        --gray-900: #0a0f1a;

        --primary-light: #4de7b7;
        --primary: #0da170;
        --primary-dark: #065f46;

        --link-color: #10b981;
        --link-hover: #0b8a60;

        --success: #22c55e;
        --warning: #eab308;
        --error: #991b1b;
        --info: #0ea5e9;

        --text-over-primary: #0a0f1a;
        --text-over-primary-dark: #e6e9f0;
        --text-over-primary-light: #0a0f1a;
        --text-over-success: #0a0f1a;
        --text-over-warning: #0a0f1a;
        --text-over-error: #e6e9f0;
        --text-over-info: #0a0f1a;

        --text-default: #e6e9f0;
        --text-muted: #aab3cc;

        --disabled: #555f7d;
        --text-disabled: #aab3cc;
        }

    17.2- 'Reset global do CSS no arquivo 'global.css':

        * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        }

        html {
        font-size: 62.5%;
        }

        body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
            Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-size: 1.6rem; /* 16 pixels */
        background-color: var(--gray-900);
        color: var(--text-default);
        }

____________________________________________________________________________________________________

18. FinalizaÃ§Ã£o do componente Heading e tipagem TypeScript de children (ReactNode)

    18.1- Tipagem do 'Props' no arquivo 'Heading.tsx':

        type HeadingProps = {
        children: React.ReactNode;
        };

    18.2- DesestruturaÃ§Ã£o:

        - Sem DesestruturaÃ§Ã£o: 

            export function Heading(props: HeadingProps) {
                return <h1 className={styles.heading}>{props.children}</h1>;
            }

        - Com DesestruturaÃ§Ã£o:

            export function Heading({ children }: HeadingProps) {
                return <h1 className={styles.heading}> {children} </h1>;
            }

    18.3- Adicionar BotÃ£o no Heading:

        1Âº- https://lucide.dev/     ->  lucide-react

        2Âº- npm i lucide-react

        3Âº- Adicionando o botÃ£o no 'App.tsx':

            export function App() {
            return (
                <>
                <Heading>
                    OlÃ¡ Mundo Novo
                    <button>
                    <TimerIcon />
                    </button>
                </Heading>
                <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
                </>
            );
            }
            
        4Âº- Editando o 'Heading.Module.css':

            .heading {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 2.4rem;
            }

____________________________________________________________________________________________________

20. Criando a estrutura HTML e CSS do nosso app para cada seÃ§Ã£o do site

    20.1- DemonstraÃ§Ã£o de organizaÃ§Ã£o de containers:

        <div className='container-fluid'>
            <div className='container'>
                <div className='content'>
                    <section>
                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni
                        tenetur illum rem obcaecati facere doloremque cupiditate,
                        accusamus eum, voluptatem cumque pariatur saepe laboriosam in non
                        ipsa quibusdam veniam veritatis? Voluptate?
                    </section>
                </div>
            </div>
        </div>

        .container-fluid {
        max-width: auto;
        }

        .container {
        max-width: 98rem;
        margin: 0 auto;
        }

        .content {
        margin: 3.2rem;
        }

    20.2- Containers dessa aplicaÃ§Ã£o:

        <div className='container'>
          <div className='content'>
            <section>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni
              tenetur illum rem obcaecati facere doloremque cupiditate,
              accusamus eum, voluptatem cumque pariatur saepe laboriosam in non
              ipsa quibusdam veniam veritatis? Voluptate?
            </section>
          </div>
        </div>

____________________________________________________________________________________________________

21. Movendo o Container para seu prÃ³prio React Component

    21.1- Criar arquivo 'Container.tsx':

        import styles from './Container.module.css';

        type ContainerProps = {
        children: React.ReactNode;
        };

        export function Container({ children }: ContainerProps) {
        return (
            <div className={styles.container}>
            <div className={styles.content}>{children}</div>
            </div>
        );
        }

    21.2- Criar arquivo 'Container.module.css':

        .container-fluid {
            max-width: auto;
        }

        .container {
            max-width: 98rem;
            margin: 0 auto;
        }

        .content {
            margin: 3.2rem;
        }

    21.3- Implementando o componente 'Container' no 'App.tsx':

        import { Container } from './components/Container';
        import { Heading } from './components/Heading';

        import './styles/theme.css';
        import './styles/global.css';

        export function App() {
        return (
            <>
            <Container>
                <Heading>LOGO</Heading>
            </Container>
            <Container>
                <Heading>MENU</Heading>
            </Container>
            </>
        );
        }

____________________________________________________________________________________________________

22. Organizando componentes em pastas padronizadas

    22.1- Exemplo de formato:

        - Pasta: Container

        - Arquivo CSS: styles.module.css

        - index.tsx:    ConteÃºdo do antigo Container.tsx

____________________________________________________________________________________________________

23. Criando o componente de logo com Ã­cone e link

    23.1- ExtensÃ£o 'auto rename tag'

    23.2- index.tsx:

        import { TimerIcon } from 'lucide-react';
        import styles from './styles.module.css';

        export function Logo() {
        return (
            <div className={styles.logo}>
            <a className={styles.logoLink} href='#'>
                <TimerIcon />
                <span>Chronos</span>
            </a>
            </div>
        );
        }

    23.3- styles.module.css:

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 2.4rem;
            padding-top: 3.2rem;
        }

        .logoLink {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.4rem;
            flex-direction: column;
            font-size: 4.2rem;
            font-weight: bold;
            text-decoration: none;
            color: var(--primary);
            transition: all 0.1s ease-in-out;
        }

        .logoLink:hover {
            filter: brightness(80%);
        }

        .logoLink svg {
            width: 6.4rem;
            height: 6.4rem;
        }

____________________________________________________________________________________________________

24. Criando componente de menu com links e Ã­cones

    24.1- index.tsx:

        import styles from './styles.module.css';
        import { HouseIcon, HistoryIcon, SettingsIcon, SunIcon } from 'lucide-react';

        export function Menu() {
        return (
            <nav className={styles.menu}>
            <a className={styles.menuLink} href='#'>
                <HouseIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <HistoryIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <SettingsIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <SunIcon />
            </a>
            </nav>
        );
        }

    24.2- styles.module.css:

        .menu {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1.6rem;
        }

        .menuLink {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            background-color: var(--primary);
            color: var(--text-over-primary);
            transition: all 0.1s ease-in-out;
            padding: 1rem;
            border-radius: 0.8rem;
        }

        .menuLink:hover {
            filter: brightness(80%);
        }

        .menuLink svg {
            width: 2.4rem;
            height: 2.4rem;
        }

____________________________________________________________________________________________________

25. Criando o componente de CountDown (Contador regressivo)

    25.1- index.tsx:

    import styles from './styles.module.css';

    export function CountDown() {
        return <div className={styles.container}>00:00</div>;
    }

    25.2- styles.module.css:

        .container {
            font-size: clamp(8rem, 30vw, 16rem);
            font-weight: bold;
            text-align: center;
            line-height: 1.3;
        }

____________________________________________________________________________________________________

26. Criando o formulÃ¡rio da pÃ¡gina inicial

    26.1- Criando formulÃ¡rio no 'App.tsx':

        <form action=''>
          <div className='formRow'>
            <label htmlFor='input'>Task</label>
            <input id='input' type='text' />
          </div>

          <div className='formRow'>
            <p>Lorem ipsum dolor sit amet.</p>
          </div>

          <div className='formRow'>
            <p>Ciclos</p>
            <p>0 0 0 0 0 0 0 </p>
          </div>

          <div className='formRow'>
            <p>Enviar</p>
          </div>
        </form>

    26.2- Estilizando o formulÃ¡rio no 'global.css':

        form {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            gap: 2.4rem;
        }

        .formRow {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            gap: 2.4rem;
        }

____________________________________________________________________________________________________

27. Input: um componente um pouco mais complexo

    27.1- index.tsx:

        type DefaultInputProps = {
            id: string;
        } & React.ComponentProps<'input'>;

        export function DefaultInput({ id, type }: DefaultInputProps) {
        return (
            <>
            <label htmlFor={id}>Task</label>
            <input id={id} type={type} />
            </>
        );
    }

    27.2- Implementando no 'App.tsx':

        <div className='formRow'>
            <DefaultInput id='input' type='number'></DefaultInput>
        </div>

____________________________________________________________________________________________________

28. Input: usando condicionais no JSX + "...props" (o restante das propriedades)

    28.1- Alterando o index.tsx:

        type DefaultInputProps = {
            id: string;
            labelText: string;
        } & React.ComponentProps<'input'>;

        export function DefaultInput({
            id,
            type,
            labelText,
            ...rest
        }: DefaultInputProps) {
            return (
                <>
                <label htmlFor={id}>{labelText}</label>
                <input id={id} type={type} {...rest} />
                </>
            );
        }

____________________________________________________________________________________________________

29. Input: adicionando estilos de CSS para input ativo, em foco e desativado

    29.1- styles.module.css:

        .input {
            background: transparent;
            text-align: center;
            border: 0.2rem solid transparent;
            border-bottom: 0.2rem solid var(--primary);
            font-size: 1.8rem;
            padding: 0.8rem;
            color: var(--text-default);
            outline: none;
            transition: all 0.1s ease-in-out;
        }

        .input:focus {
            border: 0.2rem solid var(--primary);
            border-radius: 0.8rem;
        }

        .input::placeholder {
            color: var(--gray-500);
            font-size: 1.4rem;
            font-style: italic;
        }

        .input:disabled {
            border-bottom: 0.2rem solid var(--disabled);
            color: var(--text-muted);
        }

    29.2- MudanÃ§a no 'App.tsx':

        <div className='formRow'>
            <DefaultInput
              id='input'
              type='text'
              labelText='task'
              placeholder='Ex: estudar para a prova'
            ></DefaultInput>
          </div>

____________________________________________________________________________________________________

30. Criando o componente Cycles com indicadores do ciclo pomodoro em cores

    30.1- index.tsx:

        import styles from './styles.module.css';

        export function Cycles() {
        return (
            <div className={styles.cycles}>
            <span>Ciclos:</span>
            <div className={styles.cycleDots}>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.longBreakTime}`}></span>
            </div>
            </div>
        );
        }

    30.2- styles.module.css:

        .cycles {
            display: flex;
            flex-direction: column;
            gap: 1.6rem;
            text-align: center;
        }

        .cycleDots {
            display: flex;
            gap: 0.8rem;
        }

        .cycleDot {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
        }

        .workTime {
            background-color: var(--warning);
        }

        .shortBreakTime {
            background-color: var(--primary);
        }

        .longBreakTime {
            background-color: var(--info);
        }

    30.3- App.tsx:

        <div className='formRow'>
            <Cycles></Cycles>
        </div>

____________________________________________________________________________________________________

31. Criando um componente de botÃ£o reutilizÃ¡vel com opÃ§Ãµes

    31.1- index.tsx:

    import styles from './styles.module.css';

    type DefaultButtonProps = {
    icon: React.ReactNode;
    color?: 'green' | 'red';
    } & React.ComponentProps<'button'>;

    export function DefaultButton({
    icon,
    color = 'green',
    ...props
    }: DefaultButtonProps) {
    return (
        <>
        <button className={`${styles.button} ${styles[color]}`} {...props}>
            {icon}
        </button>
        </>
    );
    }


    31.2- styles.module.css:

    .button {
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 24rem;
        padding: 0.8rem;
        border-radius: 0.8rem;
        margin: 3.2rem 0;
        transition: all 0.1s ease-in-out;
    }

    .button svg {
        width: 3.2rem;
        height: 3.2rem;
    }

    .button:hover {
        filter: brightness(80%);
    }

    .red {
        background-color: var(--error);
        color: var(--text-over-error);
    }

    .green {
        background-color: var(--primary);
        color: var(--text-over-primary);
    }


    31.3- app.tsx:

        <div className='formRow'>
            <DefaultButton icon={<PlayCircleIcon />} color='green' />
        </div>

____________________________________________________________________________________________________

32. Criando o componente de footer (rodapÃ©)

    32.1- index.tsx:

        import styles from './styles.module.css';

        export function Footer() {
        return (
            <footer className={styles.footer}>
            <a href=''>Entenda como funciona a tÃ©cnica pomodoro</a>
            <a href=''>
                Chronos Pomodoro &copy; {new Date().getFullYear()} - Feito por Fernando
                L. Dalpiaz
            </a>
            </footer>
        );
        }

    32.2- styles.module.css:

        .footer {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 1.6rem;
        }

        .footer a {
            font-size: 1.2rem;
            color: var(--text-muted);
            text-decoration: none;
        }

        .footer a:hover {
            font-size: 1.2rem;
            color: var(--text-muted);
            text-decoration: underline;
        }

    31.3- app.tsx:

        <Container>
            <Footer />
        </Container>

____________________________________________________________________________________________________

33. Entendendo o estado e o problema do efeito colateral

    export function App() {
        let numero = 0;

        function handleClick() {
            const span = document.getElementById('numero');

            if(!span) return;

            numero += 1;
            span.innerText = numero.toString();
        }

        return (<>
            <Heading>
                NÃºmero: <span id='numero'> {numero} </span> 
            <Heading/></>
            
            <button onClick={handleClick}> Aumenta </button>
        )
    }

____________________________________________________________________________________________________

34. Usando useState para o estado com programaÃ§Ã£o reativa

    34.1- useState:

        export function App() {
            const [numero, configurarNumero] = useState(0);             // Nunca usar atribuiÃ§Ã£o direta (Ex: numero += 1), mas a funÃ§Ã£o 'configurarNumero'.

            function handleClick() {
                configurarNumero( prevState => prevState + 1);          // Sempre que a funÃ§Ã£o depender do valor anterior, utilizar o prevState.
            }

            return (<>
                <Heading>
                    NÃºmero: <span id='numero'> {numero} </span> 
                <Heading/></>
                
                <button onClick={handleClick}> Aumenta </button>
            )
        }

    34.2- Lazy inicialization:

        // Coloca uma funÃ§Ã£o no useStat que sÃ³ serÃ¡ utilizada na primeira vez.

            const [numero, configurarNumero] = useState(() => {
                console.log('Lazy inicialization');
                return 0
            });

____________________________________________________________________________________________________

36. Capturando o evento de clique em link com preventDefault para tema dark e light