_____________________________________Projeto Chronos (Pomodoro)_____________________________________             

7. Criando o projeto Chronos:

    7.1- Comando: 
        
        npm create vite@latest

    7.2- Selecionar 'React' e depois 'Typescript + SWC'.

    7.3- Configurando o VSCode:

        1º- Criar pasta '.vscode'.

        2º- Criar arquivo 'settings.json' dentro da pasta '.vscode'.

        3º- Configurações do arquivo 'settings.json':

            {
            "window.zoomLevel": 1,
            "breadcrumbs.enabled": false,
            "editor.fontSize": 24,
            "debug.console.fontSize": 24,
            "terminal.integrated.fontSize": 24,
            "editor.glyphMargin": false,
            "workbench.activityBar.location": "hidden",
            "editor.lineNumbers": "off",
            "files.eol": "\n", // Final de linha sempre será LF

            // 🛠 Formatação e Lint
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true,

            "editor.codeActionsOnSave": {
                "source.fixAll.eslint": "explicit"
            },

            "[javascript]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[typescript]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[xml]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[svg]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            },
            "[html]": {
                "editor.defaultFormatter": "esbenp.prettier-vscode"
            }
            }

        4º- Criar arquivo '.prettierrc.json'.

        5º- Configurações do arquivo '.prettierrc.json':

            {
            "arrowParens": "avoid",
            "bracketSpacing": true,
            "htmlWhitespaceSensitivity": "css",
            "insertPragma": false,
            "jsxBracketSameLine": false,
            "jsxSingleQuote": true,
            "printWidth": 80,
            "proseWrap": "always",
            "quoteProps": "as-needed",
            "requirePragma": false,
            "semi": true,
            "singleQuote": true,
            "tabWidth": 2,
            "trailingComma": "all",
            "useTabs": false
            }

        6º- Comando 'npm run dev' para executar o projeto.

____________________________________________________________________________________________________

8. Configurando SSH Keys, Git e Github

    8.1- Criando chave ssh:

        ssh-keygen.exe

    8.2- Github -> Settings -> SSH and GPG keys -> New SSH Key -> Colar chave criada.

    8.3- Criação do repositório no Github

    8.4- Pegar link SSH do repositório.

    8.5- Configurando o git:

        1º- git init

        2º- git branch -m main

        3º- git config user.name "Fernando Dalpiaz"

        4º- git config user.email "fernandoldalpiaz@gmail.com"

        5º- git config core.eol lf

        6º- git config core.autocrlf input

        7º- Visualizar configurações locais: git config --list --local

    8.6- Criando o primeiro commit:

        1º- git add .

        2º- git commit -m "Commit Inicial"

        3º- git remote add origin git@github.com:FernandoDalpiaz/chronos-pomodoro.git

        4º- git push -u origin main

____________________________________________________________________________________________________

12. Component: criando meu primeiro componente do React com JSX (TSX)

    12.1- APAGAR o conteúdo gerado ao iniciar o Vite:

        - Pasta 'main.tsx':

            import './index.css'
            import App from './App.tsx'

        - Deletar 'App.css', 'App.tsx' e 'Index.css'.

    12.2- Criar a pasta 'App.tsx'.

    12.3- Criando o componente na pasta 'App.tsx':

        export function App() {
        return (
            <>                                                                                  // React Fragment
            <h1>Olá Mundo (do App)</h1>
            <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
            </>
        );
        }

    12.4- Importando o componente na pasta 'main.tsx':

        import { App } from './App';

        createRoot(document.getElementById('root')!).render(
        <StrictMode>
            <App />
        </StrictMode>,
        );

____________________________________________________________________________________________________

13. Importando e usando arquivos de CSS globais

    13.1- Criar pasta 'styles' na pasta 'src'.

    13.2- Criar os arquivos 'global.css' e 'theme.css' na pasta 'styles':

        - theme.css: Utilizada para criar variáveis. Ex:

            :root {
                --primary: pink;        // Definindo a cor primária como rosa.
            }

        - global.css: Pode utilizar as variáveis do 'theme.css'. Ex:

            h1 {
            color: var(--primary);
            }



    13.2- Importar 'global.css' e 'theme.css' no 'App.tsx':

____________________________________________________________________________________________________

14. Importando e usando arquivos de CSS Modules com escopo de componente

    14.1- Criar pasta 'components' dentro da pasta 'src'.

    14.2- Criar componente 'Heading.tsx' na pasta 'components':

        import styles from './Heading.module.css';

        export function Heading() {
        return <h1 className={styles.heading}>Olá Mundo</h1>;               // Importando o .heading do Heading.module.css
        }

    14.3- Criar componente 'Heading.module.css' na pasta 'components':

        .heading {
            background-color: brown;
        }

    14.4- Extensão CSS Modules: Ajuda a auto-preencher as classes na pasta 'Heading.tsx.

____________________________________________________________________________________________________

16. Propriedades (props) e children de componentes no React

    16.1- Adicionar input 'props' no elemento 'Heading.tsx':

        export function Heading(props) {
            return <h1 className={styles.heading}>{props.children}</h1>;
        }

    16.2- Agora, ao chamar o elemento no 'App.tsx', pode-se colocar o conteúdo filho e até atributos:


        export function App() {
        return (
            <>
            <Heading atributo1={123} atributo2='String Qualquer'>Olá Mundo Novo</Heading>
            <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
            </>
        );
        }

____________________________________________________________________________________________________

17. Variáveis e Reset de CSS do Chronos

    17.1- Ajustando o 'theme.css':

        :root {
        --gray-100: #e6e9f0;
        --gray-200: #cdd3e1;
        --gray-300: #aab3cc;
        --gray-400: #555f7d;
        --gray-500: #454f6a;
        --gray-600: #363d56;
        --gray-700: #272f43;
        --gray-800: #181f2e;
        --gray-900: #0a0f1a;

        --primary-light: #4de7b7;
        --primary: #0da170;
        --primary-dark: #065f46;

        --link-color: #10b981;
        --link-hover: #0b8a60;

        --success: #22c55e;
        --warning: #eab308;
        --error: #991b1b;
        --info: #0ea5e9;

        --text-over-primary: #0a0f1a;
        --text-over-primary-dark: #e6e9f0;
        --text-over-primary-light: #0a0f1a;
        --text-over-success: #0a0f1a;
        --text-over-warning: #0a0f1a;
        --text-over-error: #e6e9f0;
        --text-over-info: #0a0f1a;

        --text-default: #e6e9f0;
        --text-muted: #aab3cc;

        --disabled: #555f7d;
        --text-disabled: #aab3cc;
        }

    17.2- 'Reset global do CSS no arquivo 'global.css':

        * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        }

        html {
        font-size: 62.5%;
        }

        body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
            Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-size: 1.6rem; /* 16 pixels */
        background-color: var(--gray-900);
        color: var(--text-default);
        }

____________________________________________________________________________________________________

18. Finalização do componente Heading e tipagem TypeScript de children (ReactNode)

    18.1- Tipagem do 'Props' no arquivo 'Heading.tsx':

        type HeadingProps = {
        children: React.ReactNode;
        };

    18.2- Desestruturação:

        - Sem Desestruturação: 

            export function Heading(props: HeadingProps) {
                return <h1 className={styles.heading}>{props.children}</h1>;
            }

        - Com Desestruturação:

            export function Heading({ children }: HeadingProps) {
                return <h1 className={styles.heading}> {children} </h1>;
            }

    18.3- Adicionar Botão no Heading:

        1º- https://lucide.dev/     ->  lucide-react

        2º- npm i lucide-react

        3º- Adicionando o botão no 'App.tsx':

            export function App() {
            return (
                <>
                <Heading>
                    Olá Mundo Novo
                    <button>
                    <TimerIcon />
                    </button>
                </Heading>
                <p>Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto Texto </p>
                </>
            );
            }
            
        4º- Editando o 'Heading.Module.css':

            .heading {
                display: flex;
                align-items: center;
                justify-content: center;
                gap: 2.4rem;
            }

____________________________________________________________________________________________________

20. Criando a estrutura HTML e CSS do nosso app para cada seção do site

    20.1- Demonstração de organização de containers:

        <div className='container-fluid'>
            <div className='container'>
                <div className='content'>
                    <section>
                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni
                        tenetur illum rem obcaecati facere doloremque cupiditate,
                        accusamus eum, voluptatem cumque pariatur saepe laboriosam in non
                        ipsa quibusdam veniam veritatis? Voluptate?
                    </section>
                </div>
            </div>
        </div>

        .container-fluid {
        max-width: auto;
        }

        .container {
        max-width: 98rem;
        margin: 0 auto;
        }

        .content {
        margin: 3.2rem;
        }

    20.2- Containers dessa aplicação:

        <div className='container'>
          <div className='content'>
            <section>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Magni
              tenetur illum rem obcaecati facere doloremque cupiditate,
              accusamus eum, voluptatem cumque pariatur saepe laboriosam in non
              ipsa quibusdam veniam veritatis? Voluptate?
            </section>
          </div>
        </div>

____________________________________________________________________________________________________

21. Movendo o Container para seu próprio React Component

    21.1- Criar arquivo 'Container.tsx':

        import styles from './Container.module.css';

        type ContainerProps = {
        children: React.ReactNode;
        };

        export function Container({ children }: ContainerProps) {
        return (
            <div className={styles.container}>
            <div className={styles.content}>{children}</div>
            </div>
        );
        }

    21.2- Criar arquivo 'Container.module.css':

        .container-fluid {
            max-width: auto;
        }

        .container {
            max-width: 98rem;
            margin: 0 auto;
        }

        .content {
            margin: 3.2rem;
        }

    21.3- Implementando o componente 'Container' no 'App.tsx':

        import { Container } from './components/Container';
        import { Heading } from './components/Heading';

        import './styles/theme.css';
        import './styles/global.css';

        export function App() {
        return (
            <>
            <Container>
                <Heading>LOGO</Heading>
            </Container>
            <Container>
                <Heading>MENU</Heading>
            </Container>
            </>
        );
        }

____________________________________________________________________________________________________

22. Organizando componentes em pastas padronizadas

    22.1- Exemplo de formato:

        - Pasta: Container

        - Arquivo CSS: styles.module.css

        - index.tsx:    Conteúdo do antigo Container.tsx

____________________________________________________________________________________________________

23. Criando o componente de logo com ícone e link

    23.1- Extensão 'auto rename tag'

    23.2- index.tsx:

        import { TimerIcon } from 'lucide-react';
        import styles from './styles.module.css';

        export function Logo() {
        return (
            <div className={styles.logo}>
            <a className={styles.logoLink} href='#'>
                <TimerIcon />
                <span>Chronos</span>
            </a>
            </div>
        );
        }

    23.3- styles.module.css:

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 2.4rem;
            padding-top: 3.2rem;
        }

        .logoLink {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.4rem;
            flex-direction: column;
            font-size: 4.2rem;
            font-weight: bold;
            text-decoration: none;
            color: var(--primary);
            transition: all 0.1s ease-in-out;
        }

        .logoLink:hover {
            filter: brightness(80%);
        }

        .logoLink svg {
            width: 6.4rem;
            height: 6.4rem;
        }

____________________________________________________________________________________________________

24. Criando componente de menu com links e ícones

    24.1- index.tsx:

        import styles from './styles.module.css';
        import { HouseIcon, HistoryIcon, SettingsIcon, SunIcon } from 'lucide-react';

        export function Menu() {
        return (
            <nav className={styles.menu}>
            <a className={styles.menuLink} href='#'>
                <HouseIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <HistoryIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <SettingsIcon />
            </a>
            <a className={styles.menuLink} href='#'>
                <SunIcon />
            </a>
            </nav>
        );
        }

    24.2- styles.module.css:

        .menu {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1.6rem;
        }

        .menuLink {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            background-color: var(--primary);
            color: var(--text-over-primary);
            transition: all 0.1s ease-in-out;
            padding: 1rem;
            border-radius: 0.8rem;
        }

        .menuLink:hover {
            filter: brightness(80%);
        }

        .menuLink svg {
            width: 2.4rem;
            height: 2.4rem;
        }

____________________________________________________________________________________________________

25. Criando o componente de CountDown (Contador regressivo)

    25.1- index.tsx:

    import styles from './styles.module.css';

    export function CountDown() {
        return <div className={styles.container}>00:00</div>;
    }

    25.2- styles.module.css:

        .container {
            font-size: clamp(8rem, 30vw, 16rem);
            font-weight: bold;
            text-align: center;
            line-height: 1.3;
        }

____________________________________________________________________________________________________

26. Criando o formulário da página inicial

    26.1- Criando formulário no 'App.tsx':

        <form action=''>
          <div className='formRow'>
            <label htmlFor='input'>Task</label>
            <input id='input' type='text' />
          </div>

          <div className='formRow'>
            <p>Lorem ipsum dolor sit amet.</p>
          </div>

          <div className='formRow'>
            <p>Ciclos</p>
            <p>0 0 0 0 0 0 0 </p>
          </div>

          <div className='formRow'>
            <p>Enviar</p>
          </div>
        </form>

    26.2- Estilizando o formulário no 'global.css':

        form {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            gap: 2.4rem;
        }

        .formRow {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            gap: 2.4rem;
        }

____________________________________________________________________________________________________

27. Input: um componente um pouco mais complexo

    27.1- index.tsx:

        type DefaultInputProps = {
            id: string;
        } & React.ComponentProps<'input'>;

        export function DefaultInput({ id, type }: DefaultInputProps) {
        return (
            <>
            <label htmlFor={id}>Task</label>
            <input id={id} type={type} />
            </>
        );
    }

    27.2- Implementando no 'App.tsx':

        <div className='formRow'>
            <DefaultInput id='input' type='number'></DefaultInput>
        </div>

____________________________________________________________________________________________________

28. Input: usando condicionais no JSX + "...props" (o restante das propriedades)

    28.1- Alterando o index.tsx:

        type DefaultInputProps = {
            id: string;
            labelText: string;
        } & React.ComponentProps<'input'>;

        export function DefaultInput({
            id,
            type,
            labelText,
            ...rest
        }: DefaultInputProps) {
            return (
                <>
                <label htmlFor={id}>{labelText}</label>
                <input id={id} type={type} {...rest} />
                </>
            );
        }

____________________________________________________________________________________________________

29. Input: adicionando estilos de CSS para input ativo, em foco e desativado

    29.1- styles.module.css:

        .input {
            background: transparent;
            text-align: center;
            border: 0.2rem solid transparent;
            border-bottom: 0.2rem solid var(--primary);
            font-size: 1.8rem;
            padding: 0.8rem;
            color: var(--text-default);
            outline: none;
            transition: all 0.1s ease-in-out;
        }

        .input:focus {
            border: 0.2rem solid var(--primary);
            border-radius: 0.8rem;
        }

        .input::placeholder {
            color: var(--gray-500);
            font-size: 1.4rem;
            font-style: italic;
        }

        .input:disabled {
            border-bottom: 0.2rem solid var(--disabled);
            color: var(--text-muted);
        }

    29.2- Mudança no 'App.tsx':

        <div className='formRow'>
            <DefaultInput
              id='input'
              type='text'
              labelText='task'
              placeholder='Ex: estudar para a prova'
            ></DefaultInput>
          </div>

____________________________________________________________________________________________________

30. Criando o componente Cycles com indicadores do ciclo pomodoro em cores

    30.1- index.tsx:

        import styles from './styles.module.css';

        export function Cycles() {
        return (
            <div className={styles.cycles}>
            <span>Ciclos:</span>
            <div className={styles.cycleDots}>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.shortBreakTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.workTime}`}></span>
                <span className={`${styles.cycleDot} ${styles.longBreakTime}`}></span>
            </div>
            </div>
        );
        }

    30.2- styles.module.css:

        .cycles {
            display: flex;
            flex-direction: column;
            gap: 1.6rem;
            text-align: center;
        }

        .cycleDots {
            display: flex;
            gap: 0.8rem;
        }

        .cycleDot {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
        }

        .workTime {
            background-color: var(--warning);
        }

        .shortBreakTime {
            background-color: var(--primary);
        }

        .longBreakTime {
            background-color: var(--info);
        }

    30.3- App.tsx:

        <div className='formRow'>
            <Cycles></Cycles>
        </div>

____________________________________________________________________________________________________

31. Criando um componente de botão reutilizável com opções

    31.1- index.tsx:

    import styles from './styles.module.css';

    type DefaultButtonProps = {
    icon: React.ReactNode;
    color?: 'green' | 'red';
    } & React.ComponentProps<'button'>;

    export function DefaultButton({
    icon,
    color = 'green',
    ...props
    }: DefaultButtonProps) {
    return (
        <>
        <button className={`${styles.button} ${styles[color]}`} {...props}>
            {icon}
        </button>
        </>
    );
    }


    31.2- styles.module.css:

    .button {
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 24rem;
        padding: 0.8rem;
        border-radius: 0.8rem;
        margin: 3.2rem 0;
        transition: all 0.1s ease-in-out;
    }

    .button svg {
        width: 3.2rem;
        height: 3.2rem;
    }

    .button:hover {
        filter: brightness(80%);
    }

    .red {
        background-color: var(--error);
        color: var(--text-over-error);
    }

    .green {
        background-color: var(--primary);
        color: var(--text-over-primary);
    }


    31.3- app.tsx:

        <div className='formRow'>
            <DefaultButton icon={<PlayCircleIcon />} color='green' />
        </div>

____________________________________________________________________________________________________

32. Criando o componente de footer (rodapé)

    32.1- index.tsx:

        import styles from './styles.module.css';

        export function Footer() {
        return (
            <footer className={styles.footer}>
            <a href=''>Entenda como funciona a técnica pomodoro</a>
            <a href=''>
                Chronos Pomodoro &copy; {new Date().getFullYear()} - Feito por Fernando
                L. Dalpiaz
            </a>
            </footer>
        );
        }

    32.2- styles.module.css:

        .footer {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 1.6rem;
        }

        .footer a {
            font-size: 1.2rem;
            color: var(--text-muted);
            text-decoration: none;
        }

        .footer a:hover {
            font-size: 1.2rem;
            color: var(--text-muted);
            text-decoration: underline;
        }

    31.3- app.tsx:

        <Container>
            <Footer />
        </Container>

____________________________________________________________________________________________________

33. Entendendo o estado e o problema do efeito colateral

    export function App() {
        let numero = 0;

        function handleClick() {
            const span = document.getElementById('numero');

            if(!span) return;

            numero += 1;
            span.innerText = numero.toString();
        }

        return (<>
            <Heading>
                Número: <span id='numero'> {numero} </span> 
            <Heading/></>
            
            <button onClick={handleClick}> Aumenta </button>
        )
    }

____________________________________________________________________________________________________

34. Usando useState para o estado com programação reativa

    34.1- useState:

        export function App() {
            const [numero, configurarNumero] = useState(0);             // Nunca usar atribuição direta (Ex: numero += 1), mas a função 'configurarNumero'.

            function handleClick() {
                configurarNumero( prevState => prevState + 1);          // Sempre que a função depender do valor anterior, utilizar o prevState.
            }

            return (<>
                <Heading>
                    Número: <span id='numero'> {numero} </span> 
                <Heading/></>
                
                <button onClick={handleClick}> Aumenta </button>
            )
        }

    34.2- Lazy inicialization:

        // Coloca uma função no useStat que só será utilizada na primeira vez.

            const [numero, configurarNumero] = useState(() => {
                console.log('Lazy inicialization');
                return 0
            });

____________________________________________________________________________________________________

36. Capturando o evento de clique em link com preventDefault para tema dark e light

    36.1- 'Index.tsx' do elemento 'Menu':

        type AvailableThemes = 'dark' | 'light';

        const [theme, setTheme] = useState<AvailableThemes>('dark');

        function handleThemeChange(
            event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,
        ) {
            event.preventDefault();
            setTheme(theme => {
            return theme === 'dark' ? 'light' : 'dark';
            });
        }


        <a
        className={styles.menuLink}
        href='#'
        aria-label='Mudar tema'
        title='Mudar tema'
        onClick={handleThemeChange}
        >
            <SunIcon />
        </a>

____________________________________________________________________________________________________

38. useEffect - hook feito para trabalhar com efeitos colaterais no componente

    38.1- Formas de utilização do useEffect:

        1- useEffect sem dependência:
            
            useEffect(() => {                   // Executado toda vez que o componente renderiza na tela.
                console.log('', Date.now())
            })

        2- useEffect com dependência vazia:
            
            useEffect(() => {                   // Executado apenas quando o react renderiza o componente na primeira vez.
                console.log('', Date.now())
            }, [])                              // Array de dependências vazio.

        3- useEffect com dependência:
        
            useEffect(() => {                   // Executado sempre que o valor da dependência for alterado.
                console.log('', Date.now()
            )}, [theme])                        // Informa a dependência.

        - Clean up function: A função useEffect pode retornar uma função de Clean Up. Essa função será executada para limpar 'vestígios' e evitar que a página fique 'suja'.

    38.2- Mudanças no projeto:

        useEffect(() => {
            document.documentElement.setAttribute('data-theme', theme);
        }, [theme]);

____________________________________________________________________________________________________

39. Salvando o tema no localStorage e trocando o ícone de sol e lua

    type AvailableThemes = 'dark' | 'light';

    export function Menu() {
    const [theme, setTheme] = useState<AvailableThemes>(() => {
        const storageTheme =
        (localStorage.getItem('theme') as AvailableThemes) || 'dark';
        return storageTheme;
    });

    const nextThemeIcon = {
        dark: <SunIcon />,
        light: <MoonIcon />,
    };

    function handleThemeChange(
        event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,
    ) {
        event.preventDefault();
        setTheme(prevTheme => {
        return prevTheme === 'dark' ? 'light' : 'dark';
        });
    }

    useEffect(() => {
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    }, [theme]);

    return (
        <nav className={styles.menu}>
        <a
            className={styles.menuLink}
            href='#'
            aria-label='Ir para a Home'
            title='Ir para a Home'
        >
            <HouseIcon />
        </a>
        <a
            className={styles.menuLink}
            href='#'
            aria-label='Ver histórico'
            title='Ver histórico'
        >
            <HistoryIcon />
        </a>
        <a
            className={styles.menuLink}
            href='#'
            aria-label='Ir para Configurações'
            title='Ir para Configurações'
        >
            <SettingsIcon />
        </a>
        <a
            className={styles.menuLink}
            href='#'
            aria-label='Mudar tema'
            title='Mudar tema'
            onClick={handleThemeChange}
        >
            {nextThemeIcon[theme]}
        </a>
        </nav>
    );
    }

____________________________________________________________________________________________________

40. Criando a página Home e um template para todas as outras páginas

    40.1- Criando o elemento para o formulário (MainForm):

        import { DefaultInput } from '../DefaultInput';
        import { Cycles } from '../Cycles';
        import { DefaultButton } from '../DefaultButton';
        import { PlayCircleIcon } from 'lucide-react';

        export function MainForm() {
        return (
            <form action=''>
            <div className='formRow'>
                <DefaultInput
                id='input'
                type='text'
                labelText='task'
                placeholder='Ex: estudar para a prova'
                ></DefaultInput>
            </div>

            <div className='formRow'>
                <p>Lorem ipsum dolor sit amet.</p>
            </div>

            <div className='formRow'>
                <Cycles></Cycles>
            </div>

            <div className='formRow'>
                <DefaultButton icon={<PlayCircleIcon />} color='green' />
            </div>
            </form>
        );
        }

    40.2- Criando um template para as páginas da aplicação: templates/MainTemplate/index.tsx

        import { Container } from '../../components/Container';
        import { Footer } from '../../components/Footer';
        import { Logo } from '../../components/Logo';
        import { Menu } from '../../components/Menu';

        type MainTemplateProps = {
        children: React.ReactNode;
        };

        export function MainTemplate({ children }: MainTemplateProps) {
        return (
            <>
            <Container>
                <Logo />
            </Container>

            <Container>
                <Menu />
            </Container>

            {children}

            <Container>
                <Footer />
            </Container>
            </>
        );
        }

    40.3- Criando uma página para a página principal: pages/Home/index.tsx

        import { Container } from '../../components/Container';
        import { CountDown } from '../../components/CountDown';
        import { MainForm } from '../../components/MainForm';
        import { MainTemplate } from '../../templates/MainTemplate';

        export function Home() {
        return (
            <MainTemplate>
            <Container>
                <CountDown />
            </Container>
            <Container>
                <MainForm />
            </Container>
            </MainTemplate>
        );
        }

    40.4- Criando uma página para página não encontrada (provisório): pages/NotFound/index.tsx

        import { MainTemplate } from '../../templates/MainTemplate';

        export function Home() {
        return (
            <MainTemplate>
            <p>
                Lorem ipsum, dolor sit amet consectetur adipisicing elit. Sequi, dolore!
            </p>
            </MainTemplate>
        );
        }

____________________________________________________________________________________________________

41. Componente GenericHtml para páginas que renderizam HTML

    41.1- index.tsx:

        import styles from './styles.module.css';

        type GenericHtmlProps = {
        children: React.ReactNode;
        };

        export function GenericHtml({ children }: GenericHtmlProps) {
        return <div className={styles.genericHtml}>{children}</div>;
        }

    41.2- styles.module.css:

        .genericHtml h1 {
        font-size: 3.2rem;
        margin-bottom: 1.6rem;
        }

        .genericHtml h2 {
        font-size: 2.4rem;
        margin-bottom: 1.2rem;
        }

        .genericHtml h3 {
        font-size: 2rem;
        margin-bottom: 1rem;
        }

        .genericHtml p {
        font-size: 1.6rem;
        line-height: 1.6;
        margin-bottom: 1.6rem;
        }

        .genericHtml a {
        color: var(--link-color);
        text-decoration: none;
        font-weight: bold;
        }

        .genericHtml a:hover {
        text-decoration: underline;
        }

        .genericHtml ul {
        padding-left: 2.4rem;
        }

        .genericHtml li {
        margin-bottom: 0.8rem;
        }

        .genericHtml img {
        max-width: 100%;
        height: auto;
        border-radius: 0.8rem;
        display: block;
        margin: 1.6rem 0;
        }

    41.3- Página NotFound:

        import { Container } from '../../components/Container';
        import { GenericHtml } from '../../components/GenericHtml';
        import { Heading } from '../../components/Heading';
        import { MainTemplate } from '../../templates/MainTemplate';

        export function NotFound() {
        return (
            <MainTemplate>
            <Container>
                <GenericHtml>
                <Heading>404 - Página não encontrada 🚀</Heading>
                <p>
                    Opa! Parece que a página que você está tentando acessar não existe.
                    Talvez ela tenha tirado férias, resolvido explorar o universo ou se
                    perdido em algum lugar entre dois buracos negros. 🌌
                </p>
                <p>
                    Mas calma, você não está perdido no espaço (ainda). Dá pra voltar em
                    segurança para a <a href='/'>página principal</a> ou{' '}
                    <a href='/history'>para o histórico</a> — ou pode ficar por aqui e
                    fingir que achou uma página secreta que só os exploradores mais
                    legais conseguem acessar. 🧭✨
                </p>
                <p>
                    Se você acha que essa página deveria existir (ou se quiser bater um
                    papo sobre viagem no tempo e buracos de minhoca), é só entrar em
                    contato. Caso contrário, use o menu para voltar ao mundo real.
                </p>
                <p>
                    Enquanto isso, fica aqui uma reflexão: "Se uma página não existe na
                    internet, será que ela existiu de verdade?" 🤔💭
                </p>
                </GenericHtml>
            </Container>
            </MainTemplate>
        );
        }

    41.4- Página AboutPomodoro:

        import { Container } from '../../components/Container';
        import { GenericHtml } from '../../components/GenericHtml';
        import { Heading } from '../../components/Heading';
        import { MainTemplate } from '../../templates/MainTemplate';

        export function AboutPomodoro() {
        return (
            <MainTemplate>
            <Container>
                <GenericHtml>
                <Heading>A Técnica Pomodoro 🍅</Heading>

                <p>
                    A Técnica Pomodoro é uma metodologia de produtividade criada por{' '}
                    <strong>Francesco Cirillo</strong>, que consiste em dividir o
                    trabalho em blocos de tempo (os famosos "Pomodoros") intercalados
                    com pausas. O objetivo é manter o foco total por um período curto e
                    garantir descansos para evitar o cansaço mental.
                </p>

                <h2>Como funciona o Pomodoro tradicional?</h2>
                <ul>
                    <li>
                    <strong>1. Defina uma tarefa</strong> que você deseja realizar.
                    </li>
                    <li>
                    <strong>2. Trabalhe nela por 25 minutos</strong> sem interrupções.
                    </li>
                    <li>
                    <strong>3. Faça uma pausa curta de 5 minutos</strong>.
                    </li>
                    <li>
                    <strong>4. A cada 4 ciclos, faça uma pausa longa</strong>{' '}
                    (geralmente 15 a 30 minutos).
                    </li>
                </ul>

                <h2>
                    Mas no <strong>Chronos Pomodoro</strong> tem um diferencial 🚀
                </h2>

                <p>
                    Nosso app segue o conceito original, mas com algumas melhorias e
                    personalizações pra deixar o processo ainda mais eficiente:
                </p>

                <h3>⚙️ Personalização do tempo</h3>
                <p>
                    Você pode configurar o tempo de foco, descanso curto e descanso
                    longo do jeito que quiser! Basta acessar a{' '}
                    <a href='/settings'>página de configurações</a> e ajustar os minutos
                    como preferir.
                </p>

                <h3>🔁 Ciclos organizados em sequência</h3>
                <p>
                    A cada ciclo completado, uma nova task é adicionada automaticamente
                    ao seu histórico, e o app já sugere o próximo ciclo (foco ou
                    descanso).
                </p>
                <p>
                    <strong>Nosso padrão:</strong>
                </p>
                <ul>
                    <li>
                    Ciclos <strong>ímpares</strong>: Trabalho (foco).
                    </li>
                    <li>
                    Ciclos <strong>pares</strong>: Descanso curto.
                    </li>
                    <li>
                    Ciclo <strong>8</strong>: Descanso longo especial, pra resetar o
                    ciclo completo.
                    </li>
                </ul>

                <h3>🍅 Visualização dos ciclos</h3>
                <p>
                    Logo abaixo do cronômetro, você verá bolinhas coloridas
                    representando os ciclos:
                </p>
                <ul>
                    <li>🟡 Amarelo: Ciclo de trabalho (foco).</li>
                    <li>🟢 Verde: Descanso curto.</li>
                    <li>🔵 Azul: Descanso longo (aparece a cada 8 ciclos).</li>
                </ul>

                <p>
                    Assim, você sempre sabe em que parte do processo está e o que vem a
                    seguir. Não precisa mais anotar no papel ou ficar calculando de
                    cabeça!
                </p>

                <h3>📊 Histórico automático</h3>
                <p>
                    Todas as suas tarefas e ciclos concluídos ficam salvos no{' '}
                    <a href='/history'>histórico</a>, com status de completas ou
                    interrompidas. Assim, você consegue acompanhar sua evolução ao longo
                    do tempo.
                </p>

                <h2>Por que usar o Chronos Pomodoro?</h2>
                <ul>
                    <li>✅ Organize seu foco com clareza.</li>
                    <li>✅ Trabalhe e descanse na medida certa.</li>
                    <li>✅ Personalize seus próprios ciclos e tempos.</li>
                    <li>✅ Acompanhe seu histórico automaticamente.</li>
                </ul>

                <p>
                    <strong>Pronto pra focar?</strong> Bora lá{' '}
                    <a href='/'>voltar para a página inicial</a> e iniciar seus
                    Pomodoros! 🍅🚀
                </p>

                <p>
                    <em>"Foco total, sem pressa, sem pausa, só vai!"</em> 💪🧘‍♂️
                </p>
                </GenericHtml>
            </Container>
            </MainTemplate>
        );
        }

____________________________________________________________________________________________________

42. Definindo os models (modelos) da aplicação TaskModel e TaskStateModel

    42.1- models/TaskModel.ts

        import type { TaskStateModel } from './TaskStateModel';

        export type TaskModel = {
        id: string;
        name: string;
        duration: number;
        startDate: number;
        completeDate: number | null;
        interruptDate: number | null;
        type: keyof TaskStateModel['config'];
        };


    42.2- models/TaskStateModel.ts

        import type { TaskModel } from './TaskModel';

        export type TaskStateModel = {
        tasks: TaskModel[];
        secondsRemaining: number;
        formattedSecondsRemaining: string;
        activeTask: TaskModel | null;
        currentCycle: number;
        config: {
            workTime: number;
            shortBreakTime: number;
            longBreakTime: number;
        };
        };

____________________________________________________________________________________________________

47. Context API - criando um context com createContext, useContext + Provider

    47.1- Contexts/TaskContext/index.tsx:

        import { createContext } from "react";

        export const TaskContext = createContext({
        chave: 'valor',
        })

    47.2- App.tsx:

        <TaskContext.Provider value={{outrovalor: 'abc'}}>
            <Home />;
        </TaskContext.Provider>

____________________________________________________________________________________________________

48. Context API - movendo nosso estado real para dentro do contexto

    48.1- Contexts/TaskContext/index.tsx:

        import { createContext, useContext } from 'react';
        import type { TaskStateModel } from '../../models/TaskStateModel';

        const initialState: TaskStateModel = {
        tasks: [],
        secondsRemaining: 0,
        formattedSecondsRemaining: '00:00',
        activeTask: null,
        currentCycle: 0,
        config: {
            workTime: 25,
            shortBreakTime: 5,
            longBreakTime: 15,
        },
        };

        const initialContextValue = {
        state: initialState,
        setState: () => {},
        };

        type TaskContextProps = {
        state: TaskStateModel;
        setState: React.Dispatch<React.SetStateAction<TaskStateModel>>;
        };

        export const TaskContext = createContext<TaskContextProps>(initialContextValue);

        type TaskContextProviderProps = {
        children: React.ReactNode;
        };

        export function TaskContextProvider({ children }: TaskContextProviderProps) {
        return (
            <TaskContext.Provider value={initialContextValue}>
            {children}
            </TaskContext.Provider>
        );
        }

        export function useTaskContext() {
        return useContext(TaskContext);
        }

    48.2- App.tsx:

        export function App() {
            return (
                <TaskContextProvider>
                <Home />
                </TaskContextProvider>
            );
        }
    
    48.3- CountDown/index.tsx:

        export function CountDown() {
            const taskContext = useTaskContext();
            console.log(taskContext);
            
            return <div className={styles.container}>00:00</div>;
        }

____________________________________________________________________________________________________

50. Organizando o contexto em arquivos separados

    50.1- TaskContext\initialTaskState.ts

        import type { TaskStateModel } from '../../models/TaskStateModel';

        export const initialTaskState: TaskStateModel = {
        tasks: [],
        secondsRemaining: 0,
        formattedSecondsRemaining: '00:00',
        activeTask: null,
        currentCycle: 0,
        config: {
            workTime: 25,
            shortBreakTime: 5,
            longBreakTime: 15,
        },
        };


    50.2- TaskContext\taskContext.tsx

        import { createContext } from 'react';
        import type { TaskStateModel } from '../../models/TaskStateModel';
        import { initialTaskState } from './initialTaskState';

        type TaskContextProps = {
        state: TaskStateModel;
        setState: React.Dispatch<React.SetStateAction<TaskStateModel>>;
        };

        const initialContextValue = {
        state: initialTaskState,
        setState: () => {},
        };

        export const TaskContext = createContext<TaskContextProps>(initialContextValue);

    50.3- TaskContext\taskContextProvider.tsx

        import { useState } from 'react';
        import { initialTaskState } from './initialTaskState';
        import { TaskContext } from './taskContext';

        type TaskContextProviderProps = {
        children: React.ReactNode;
        };

        export function TaskContextProvider({ children }: TaskContextProviderProps) {
        const [state, setState] = useState(initialTaskState);

        return (
            <TaskContext.Provider value={{ state, setState }}>
            {children}
            </TaskContext.Provider>
        );
        }

    50.4- TaskContext\useTaskContext.ts

        import { useContext } from 'react';
        import { TaskContext } from './taskContext';

        export function useTaskContext() {
        return useContext(TaskContext);
        }

____________________________________________________________________________________________________

51. Capturando o evento submit do formulário (onSubmit com preventDefault)

    51.1- MainForm/index.tsx

        export function MainForm() {
        function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
            event.preventDefault();
            console.log('Deu certo');
        }

        return (
            <form onSubmit={handleCreateNewTask} className='form' action=''>
            <div className='formRow'>
                <DefaultInput
                id='input'
                type='text'
                labelText='task'
                placeholder='Ex: estudar para a prova'
                ></DefaultInput>
            </div>

            <div className='formRow'>
                <p>Nesse ciclo foque por 25 min.</p>
            </div>

            <div className='formRow'>
                <Cycles></Cycles>
            </div>

            <div className='formRow'>
                <DefaultButton icon={<PlayCircleIcon />} color='green' />
            </div>
            </form>
        );
        }

____________________________________________________________________________________________________

52. Input controlado no React com "value", "onChange" e useState

    const [taskName, setTaskName] = useState('');

    <DefaultInput
          id='input'
          type='text'
          labelText='task'
          placeholder='Ex: estudar para a prova'
          value={taskName}
          onChange={e => setTaskName(e.target.value)}
        >
    </DefaultInput>

____________________________________________________________________________________________________

53. useRef + Ref para não causar re-renderizações nos componentes

    const taskNameInput = useRef<HTMLInputElement>(null);

    <div className='formRow'>
    <DefaultInput
        id='input'
        type='text'
        labelText='task'
        placeholder='Ex: estudar para a prova'
        ref={taskNameInput}
    ></DefaultInput>
    </div>

____________________________________________________________________________________________________
54. Validando o formulário e criando uma nova tarefa

    function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    if (taskNameInput.current === null) return;
    const taskName = taskNameInput.current.value.trim();
    if (!taskName) {
      alert('Digite o nome da tarefa');
    }
    const newTask: TaskModel = {
      id: Date.now().toString(),
      name: taskName,
      startDate: Date.now(),
      completeDate: null,
      interruptDate: null,
      duration: 1,
      type: 'workTime',
    };

    const secondsRemaining = newTask.duration * 60;

    setState(prevState => {
      return {
        ...prevState,
        config: { ...prevState.config },
        activeTask: newTask,
        currentCycle: 1,
        secondsRemaining,
        formattedSecondsRemaining: '00:00',
        tasks: [...prevState.tasks, newTask],
      };
    });
  }

____________________________________________________________________________________________________

55. Trabalhando com o estado antes e depois de setState (getNextCycle)

    55.1- utils/getNextCycle.ts:

        export function getNexCycle(currentCycle: number) {
            return currentCycle === 0 || currentCycle === 8 ? 1 : currentCycle + 1;
        }

    55.2- MainForm/index.tsx:

        const nextCycle = getNexCycle(state.currentCycle);

____________________________________________________________________________________________________

56. Pegando o type do próximo ciclo - Algoritmo similar ao FizzBuzz
57. state.config em duration da task (workTime, shortBreakTime, longBreakTime)

    import { DefaultInput } from '../DefaultInput';
    import { Cycles } from '../Cycles';
    import { DefaultButton } from '../DefaultButton';
    import { PlayCircleIcon } from 'lucide-react';
    import { useRef } from 'react';
    import type { TaskModel } from '../../models/TaskModel';
    import { useTaskContext } from '../../Contexts/TaskContext/useTaskContext';
    import { getNextCycle } from '../../utils/getNextCycle';
    import { getNextCycleType } from '../../utils/getNextCycleType';

    export function MainForm() {
    const { state, setState } = useTaskContext();
    const taskNameInput = useRef<HTMLInputElement>(null);

    const nextCycle = getNextCycle(state.currentCycle);
    const nextCycleType = getNextCycleType(nextCycle);

    function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        if (taskNameInput.current === null) return;
        const taskName = taskNameInput.current.value.trim();
        if (!taskName) {
        alert('Digite o nome da tarefa');
        }
        const newTask: TaskModel = {
        id: Date.now().toString(),
        name: taskName,
        startDate: Date.now(),
        completeDate: null,
        interruptDate: null,
        duration: state.config[nextCycleType],
        type: nextCycleType,
        };

        const secondsRemaining = newTask.duration * 60;

        setState(prevState => {
        return {
            ...prevState,
            config: { ...prevState.config },
            activeTask: newTask,
            currentCycle: nextCycle,
            secondsRemaining,
            formattedSecondsRemaining: '00:00',
            tasks: [...prevState.tasks, newTask],
        };
        });
    }

    return (
        <form onSubmit={handleCreateNewTask} className='form' action=''>
        <div className='formRow'>
            <DefaultInput
            id='input'
            type='text'
            labelText='task'
            placeholder='Ex: estudar para a prova'
            ref={taskNameInput}
            ></DefaultInput>
        </div>

        <div className='formRow'>
            <p>Nesse ciclo foque por 25 min.</p>
        </div>

        <div className='formRow'>
            <Cycles></Cycles>
        </div>

        <div className='formRow'>
            <DefaultButton icon={<PlayCircleIcon />} color='green' />
        </div>
        </form>
    );
    }

____________________________________________________________________________________________________

58. Formatando segundos em minutos e segundos (MM:SS ou 00:00)

    export function formatSecondsToMinutes(seconds: number): string {
        const minutes = String(Math.floor(seconds / 60)).padStart(2, '0');
        const secondsRemaining = String(Math.floor(seconds % 60)).padStart(2, '0');
        return `${minutes}:${secondsRemaining}`;
    }

____________________________________________________________________________________________________

59. Como iterar elementos JSX e usar a prop key no React (do jeito certo)

    import { useTaskContext } from '../../Contexts/TaskContext/useTaskContext';
    import { getNextCycle } from '../../utils/getNextCycle';
    import { getNextCycleType } from '../../utils/getNextCycleType';
    import styles from './styles.module.css';

    export function Cycles() {
    const { state } = useTaskContext();

    const cycleStep = Array.from({ length: state.currentCycle });

    const cycleDescriptionMap = {
        workTime: 'foco',
        shortBreakTime: 'descanso curto',
        longBreakTime: 'descanso longo',
    };

    return (
        <div className={styles.cycles}>
        <span>Ciclos:</span>
        <div className={styles.cycleDots}>
            {cycleStep.map((_, index) => {
            const nextCycle = getNextCycle(index);
            const nextCycleType = getNextCycleType(nextCycle);
            return (
                <span
                key={`${nextCycleType}_${nextCycle}`}
                className={`${styles.cycleDot} ${styles[nextCycleType]}`}
                aria-label={`Indicador de ciclo de ${cycleDescriptionMap[nextCycleType]}`}
                title={`Indicador de ciclo de ${cycleDescriptionMap[nextCycleType]}`}
                ></span>
            );
            })}
        </div>
        </div>
    );
    }

____________________________________________________________________________________________________

60. Desativando o input se tem task ativa (disabled)

      <div className='formRow'>
        <DefaultInput
          id='input'
          type='text'
          labelText='task'
          placeholder='Ex: estudar para a prova'
          ref={taskNameInput}
          disabled={!!state.activeTask}
        ></DefaultInput>
      </div>

____________________________________________________________________________________________________

61. Trocando o botão de iniciar para parar tarefa atual

    export function MainForm() {
    const { state, setState } = useTaskContext();
    const taskNameInput = useRef<HTMLInputElement>(null);

    const nextCycle = getNextCycle(state.currentCycle);
    const nextCycleType = getNextCycleType(nextCycle);

    function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        if (taskNameInput.current === null) return;
        const taskName = taskNameInput.current.value.trim();
        if (!taskName) {
        alert('Digite o nome da tarefa');
        }
        const newTask: TaskModel = {
        id: Date.now().toString(),
        name: taskName,
        startDate: Date.now(),
        completeDate: null,
        interruptDate: null,
        duration: state.config[nextCycleType],
        type: nextCycleType,
        };

        const secondsRemaining = newTask.duration * 60;

        setState(prevState => {
        return {
            ...prevState,
            config: { ...prevState.config },
            activeTask: newTask,
            currentCycle: nextCycle,
            secondsRemaining,
            formattedSecondsRemaining: formatSecondsToMinutes(secondsRemaining),
            tasks: [...prevState.tasks, newTask],
        };
        });
    }

    return (
        <form onSubmit={handleCreateNewTask} className='form' action=''>
        <div className='formRow'>
            <DefaultInput
            id='input'
            type='text'
            labelText='task'
            placeholder='Ex: estudar para a prova'
            ref={taskNameInput}
            disabled={!!state.activeTask}
            ></DefaultInput>
        </div>

        <div className='formRow'>
            <p>Nesse ciclo foque por 25 min.</p>
        </div>

        {state.currentCycle > 0 && (
            <div className='formRow'>
            <Cycles></Cycles>
            </div>
        )}

        <div className='formRow'>
            {!state.activeTask ? (
            <DefaultButton
                aria-label='Iniciar nova tarefa'
                title='Iniciar nova tarefa'
                icon={<PlayCircleIcon />}
                color='green'
                type='submit'
            />
            ) : (
            <DefaultButton
                aria-label='Interromper tarefa atual'
                title='Interromper tarefa atual'
                icon={<StopCircleIcon />}
                color='red'
                type='button'
            />
            )}
        </div>
        </form>
    );
    }

____________________________________________________________________________________________________

62. Interrompendo a task + solucionando bug estranho

    export function MainForm() {
    const { state, setState } = useTaskContext();
    const taskNameInput = useRef<HTMLInputElement>(null);

    const nextCycle = getNextCycle(state.currentCycle);
    const nextCycleType = getNextCycleType(nextCycle);

    function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        if (taskNameInput.current === null) return;
        const taskName = taskNameInput.current.value.trim();
        if (!taskName) {
        alert('Digite o nome da tarefa');
        }
        const newTask: TaskModel = {
        id: Date.now().toString(),
        name: taskName,
        startDate: Date.now(),
        completeDate: null,
        interruptDate: null,
        duration: state.config[nextCycleType],
        type: nextCycleType,
        };

        const secondsRemaining = newTask.duration * 60;

        setState(prevState => {
        return {
            ...prevState,
            config: { ...prevState.config },
            activeTask: newTask,
            currentCycle: nextCycle,
            secondsRemaining,
            formattedSecondsRemaining: formatSecondsToMinutes(secondsRemaining),
            tasks: [...prevState.tasks, newTask],
        };
        });
    }

    function handleInterruptTask() {
        setState(prevState => {
        return {
            ...prevState,
            activeTask: null,
            secondsRemaining: 0,
            formattedSecondsRemaining: '00:00',
        };
        });
    }

    return (
        <form onSubmit={handleCreateNewTask} className='form' action=''>
        <div className='formRow'>
            <DefaultInput
            id='input'
            type='text'
            labelText='task'
            placeholder='Ex: estudar para a prova'
            ref={taskNameInput}
            disabled={!!state.activeTask}
            ></DefaultInput>
        </div>

        <div className='formRow'>
            <p>Nesse ciclo foque por 25 min.</p>
        </div>

        {state.currentCycle > 0 && (
            <div className='formRow'>
            <Cycles></Cycles>
            </div>
        )}

        <div className='formRow'>
            {!state.activeTask ? (
            <DefaultButton
                aria-label='Iniciar nova tarefa'
                title='Iniciar nova tarefa'
                icon={<PlayCircleIcon />}
                color='green'
                type='submit'
                key='Submit'
            />
            ) : (
            <DefaultButton
                aria-label='Interromper tarefa atual'
                title='Interromper tarefa atual'
                icon={<StopCircleIcon />}
                color='red'
                type='button'
                onClick={handleInterruptTask}
                key='Interrupt'
            />
            )}
        </div>
        </form>
    );
    }

____________________________________________________________________________________________________

63. Adicionando a data que a tarefa foi interrompida (interruptDate)

    export function MainForm() {
    const { state, setState } = useTaskContext();
    const taskNameInput = useRef<HTMLInputElement>(null);

    const nextCycle = getNextCycle(state.currentCycle);
    const nextCycleType = getNextCycleType(nextCycle);

    function handleCreateNewTask(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        if (taskNameInput.current === null) return;
        const taskName = taskNameInput.current.value.trim();
        if (!taskName) {
        alert('Digite o nome da tarefa');
        }
        const newTask: TaskModel = {
        id: Date.now().toString(),
        name: taskName,
        startDate: Date.now(),
        completeDate: null,
        interruptDate: null,
        duration: state.config[nextCycleType],
        type: nextCycleType,
        };

        const secondsRemaining = newTask.duration * 60;

        setState(prevState => {
        return {
            ...prevState,
            config: { ...prevState.config },
            activeTask: newTask,
            currentCycle: nextCycle,
            secondsRemaining,
            formattedSecondsRemaining: formatSecondsToMinutes(secondsRemaining),
            tasks: [...prevState.tasks, newTask],
        };
        });
    }

    function handleInterruptTask() {
        setState(prevState => {
        return {
            ...prevState,
            activeTask: null,
            secondsRemaining: 0,
            formattedSecondsRemaining: '00:00',
            tasks: prevState.tasks.map(task => {
            if (prevState.activeTask && prevState.activeTask.id === task.id) {
                return { ...task, interruptDate: Date.now() };
            }
            return task;
            }),
        };
        });
    }

    return (
        <form onSubmit={handleCreateNewTask} className='form' action=''>
        <div className='formRow'>
            <DefaultInput
            id='input'
            type='text'
            labelText='task'
            placeholder='Ex: estudar para a prova'
            ref={taskNameInput}
            disabled={!!state.activeTask}
            ></DefaultInput>
        </div>

        <div className='formRow'>
            <p>Nesse ciclo foque por 25 min.</p>
        </div>

        {state.currentCycle > 0 && (
            <div className='formRow'>
            <Cycles></Cycles>
            </div>
        )}

        <div className='formRow'>
            {!state.activeTask ? (
            <DefaultButton
                aria-label='Iniciar nova tarefa'
                title='Iniciar nova tarefa'
                icon={<PlayCircleIcon />}
                color='green'
                type='submit'
                key='Submit'
            />
            ) : (
            <DefaultButton
                aria-label='Interromper tarefa atual'
                title='Interromper tarefa atual'
                icon={<StopCircleIcon />}
                color='red'
                type='button'
                onClick={handleInterruptTask}
                key='Interrupt'
            />
            )}
        </div>
        </form>
    );
    }

____________________________________________________________________________________________________

64. Entendendo useReducer, reducer, dispatch e actions para trabalhar com o estado